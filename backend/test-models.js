require('dotenv').config();
const { getModelInfo } = require('./services/ai');

async function testModels() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π OpenAI...\n');
    
    try {
        const modelInfo = await getModelInfo();
        
        if (modelInfo.error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', modelInfo.error);
            return;
        }
        
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
        modelInfo.available.forEach(model => {
            const visionIcon = model.supports_vision ? 'üëÅÔ∏è' : '‚ùå';
            console.log(`  ${visionIcon} ${model.id} (—Å–æ–∑–¥–∞–Ω–∞: ${new Date(model.created * 1000).toLocaleDateString()})`);
        });
        
        console.log('\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
        Object.entries(modelInfo.configured).forEach(([type, model]) => {
            console.log(`  ‚Ä¢ ${type}: ${model}`);
        });
        
        console.log('\nüëÅÔ∏è  Vision –º–æ–¥–µ–ª–∏ OpenAI:');
        modelInfo.vision_models.forEach(model => {
            console.log(`  ‚Ä¢ ${model}`);
        });
        
        console.log('\nüéØ –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
        Object.entries(modelInfo.current).forEach(([type, model]) => {
            const isVision = modelInfo.vision_models.some(vm => model.includes(vm));
            const icon = isVision ? 'üëÅÔ∏è' : '‚ùå';
            console.log(`  ${icon} ${type}: ${model}`);
        });
        
        console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('  ‚Ä¢ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–µ–ª–∏ —Å üëÅÔ∏è');
        console.log('  ‚Ä¢ GPT-5 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç vision, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ beta');
        console.log('  ‚Ä¢ gpt-4o-mini - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
        
        console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testModels();
